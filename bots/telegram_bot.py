import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
try:
    from core.math_rag import MathRAG
except ImportError:
    from ..core.math_rag import MathRAG
from core.safe_executor import SafeExecutor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.token = os.getenv("TELEGRAM_TOKEN")
        if not self.token:
            raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

        self.rag = MathRAG()
        self.executor = SafeExecutor()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.id}")
        welcome_text = """
        üßÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Math Solver Bot!* üöÄ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚úÖ –†–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
‚úÖ –û–±—ä—è—Å–Ω—è—Ç—å —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è
‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –∫–æ–¥

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
`2 + 2 * 2`
`–∏–Ω—Ç–µ–≥—Ä–∞–ª –æ—Ç x^2`
`—Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 3x + 5 = 20`

üõ† *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - —Å–ø—Ä–∞–≤–∫–∞
        """
        await update.message.reply_markdown_v2(welcome_text)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {update.effective_user.id}")
        help_text = """
        üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
- –õ—é–±–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
- –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
- –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞/–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π

*–ü—Ä–∏–º–µ—Ä—ã:*
sin(pi/2) + cos(0)
lim x->0 (sin(x)/x)
derivative of x^3 + 2x

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ LaTeX-–Ω–æ—Ç–∞—Ü–∏—è
- –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        """
        await update.message.reply_markdown_v2(help_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user = update.effective_user
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {update.message.text}")

            result = self.rag.solve_problem(update.message.text)

            if "error" in result:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                return

            response = self._format_response(result)
            await update.message.reply_markdown_v2(response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def _format_response(self, result: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown"""

        def escape(text: str) -> str:
            special_chars = {
                '_': r'\_', '*': r'\*', '[': r'\[', ']': r'\]',
                '(': r'\(', ')': r'\)', '~': r'\~', '`': r'\`',
                '>': r'\>', '#': r'\#', '+': r'\+', '-': r'\-',
                '=': r'\=', '|': r'\|', '{': r'\{', '}': r'\}',
                '.': r'\.', '!': r'\!'
            }
            return text.translate(str.maketrans(special_chars))

        if "error" in result:
            return f"‚ùå *–û—à–∏–±–∫–∞:*\n`{escape(result['error'])}`"

        parts = []
        if result.get("formatted_steps"):
            parts.append(f"üìù *–†–µ—à–µ–Ω–∏–µ:*\n`{escape(result['formatted_steps'])}`")
        if result.get("result"):
            parts.append(f"‚úÖ *–†–µ–∑—É–ª—å—Ç–∞—Ç:* `{escape(result['result'])}`")
        if result.get("code"):
            parts.append(f"üíª *–ö–æ–¥:*\n```python\n{result['code']}\n```")

        return "\n\n".join(parts)

    def run(self):
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
            app = ApplicationBuilder() \
                .token(self.token) \
                .build()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ü–ï–†–í–´–ú–ò
            app.add_handler(CommandHandler("start", self.start))
            app.add_handler(CommandHandler("help", self.help))

            # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            app.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
                self.handle_message
            ))

            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
            app.run_polling(
                drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
                poll_interval=0.5
            )

        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            raise


if __name__ == "__main__":
    try:
        logger.info("=== –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ ===")
        bot = TelegramBot()
        bot.run()
    except Exception as e:
        logger.critical(f"–§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}", exc_info=True)
    finally:
        logger.info("=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ ===")
